# SoulMatting Platform - Performance Testing Workflow
# Author: Kim Hsiao
# Version: 1.0.0
# Created: 2024-01-20
# Last Updated: 2024-01-20

name: Performance Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run performance tests daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - lighthouse
          - load
          - stress
          - api
      target_url:
        description: 'Target URL for testing (optional)'
        required: false
        default: 'http://localhost:3000'

permissions:
  contents: read
  pull-requests: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.15.0'

jobs:
  # Build and prepare test environment
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=perf-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            perf-${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            apps/*/build
            apps/*/.next
          key: build-${{ github.sha }}

  # Lighthouse performance testing
  # TEMPORARILY DISABLED: Lighthouse performance audit disabled due to GitHub Actions errors (run ids: #17197103321, #17197103316, #17197103314)
  # TODO: Re-enable after fixing performance testing infrastructure issues
  # lighthouse:
  #   name: Lighthouse Performance Audit
  #   runs-on: ubuntu-latest
  #   needs: setup
  #   timeout-minutes: 20
  #   if: github.event.inputs.test_type == 'lighthouse' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''

  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: soulmatting_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #
  #     redis:
  #       image: redis:7-alpine
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 6379:6379
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: ${{ env.PNPM_VERSION }}
  #         run_install: false
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'pnpm'
  #
  #     - name: Restore dependencies cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.pnpm-store
  #           node_modules
  #           apps/*/node_modules
  #           packages/*/node_modules
  #         key: ${{ needs.setup.outputs.cache-key }}
  #
  #     - name: Install dependencies
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run: pnpm install --frozen-lockfile
  #
  #     - name: Restore build cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           apps/*/dist
  #           apps/*/build
  #           apps/*/.next
  #         key: build-${{ github.sha }}
  #
  #     - name: Setup database
  #       run: |
  #         pnpm --filter @soulmatting/database run generate
  #         pnpm run db:migrate:test
  #         pnpm run db:seed
  #       env:
  #         DATABASE_URL: postgresql://postgres:postgres@localhost:5432/soulmatting_test
  #         REDIS_URL: redis://localhost:6379
  #
  #     - name: Start application
  #       run: |
  #         # Start web application (services already running via GitHub Actions)
  #         pnpm --filter @soulmatting/web run dev &
  #         sleep 30
  #         # Wait for application to be ready
  #         timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
  #       env:
  #         CI: true
  #         DATABASE_URL: postgresql://postgres:postgres@localhost:5432/soulmatting_test
  #         REDIS_URL: redis://localhost:6379
  #
  #     - name: Run Lighthouse CI
  #       uses: treosh/lighthouse-ci-action@v10
  #       with:
  #         configPath: './lighthouserc.json'
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true
  #       env:
  #         LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
  #
  #     - name: Upload Lighthouse results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: lighthouse-performance-results
  #         path: |
  #           lhci_reports/
  #           .lighthouseci/
  #         retention-days: 30

  # Load testing with Artillery
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 30
    if: github.event.inputs.test_type == 'load' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: soulmatting_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            apps/*/build
            apps/*/.next
          key: build-${{ github.sha }}

      - name: Setup test database
        run: |
          pnpm --filter @soulmatting/database run generate
          pnpm run db:migrate:test
          pnpm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/soulmatting_test
          REDIS_URL: redis://localhost:6379

      - name: Start API server
        run: |
          # Start Supabase services (excluding postgres/redis as they're already running)
          docker compose up -d kong auth realtime rest
          sleep 15
          # Wait for Supabase REST API to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3001/rest/v1/; do sleep 2; done'
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/soulmatting_test
          REDIS_URL: redis://localhost:6379

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Run load tests
        run: |
          artillery run tests/performance/load-test.yml --output load-test-results.json
          artillery report load-test-results.json --output load-test-report.html
        env:
          TARGET_URL: http://localhost:3001

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: |
            load-test-results.json
            load-test-report.html
          retention-days: 30

  # API performance testing
  api-performance:
    name: API Performance Testing
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 20
    if: github.event.inputs.test_type == 'api' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: soulmatting_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          pnpm --filter @soulmatting/database run generate
          pnpm run db:migrate:test
          pnpm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/soulmatting_test
          REDIS_URL: redis://localhost:6379

      - name: Start API server
        run: |
          # Start Supabase services (excluding postgres/redis as they're already running)
          docker compose up -d kong auth realtime rest
          sleep 15
          # Wait for Supabase REST API to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3001/rest/v1/; do sleep 2; done'
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/soulmatting_test
          REDIS_URL: redis://localhost:6379

      - name: Run API performance tests
        run: |
          artillery run tests/performance/api-test.yml --output api-performance-results.json
          artillery report api-performance-results.json --output api-performance-report.html
        env:
          TARGET_URL: http://localhost:3001

      - name: Upload API performance results
        uses: actions/upload-artifact@v4
        with:
          name: api-performance-results
          path: |
            api-performance-results.json
            api-performance-report.html
          retention-days: 30

  # Performance summary and reporting
  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [lighthouse, load-test, api-performance]
    if: always()
    timeout-minutes: 10

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: performance-results

      - name: Generate performance summary
        run: |
          echo "# 🚀 Performance Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lighthouse | ${{ needs.lighthouse.result == 'success' && '✅ Passed' || needs.lighthouse.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Web performance audit |" >> $GITHUB_STEP_SUMMARY
          echo "| Load Testing | ${{ needs.load-test.result == 'success' && '✅ Passed' || needs.load-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Application load testing |" >> $GITHUB_STEP_SUMMARY
          echo "| API Performance | ${{ needs.api-performance.result == 'success' && '✅ Passed' || needs.api-performance.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | API endpoint performance |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Test completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Artifacts:** Check the Actions tab for detailed reports" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🚀 Performance Test Results

            | Test Type | Status |
            |-----------|--------|
            | Lighthouse | ${{ needs.lighthouse.result == 'success' && '✅ Passed' || needs.lighthouse.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |
            | Load Testing | ${{ needs.load-test.result == 'success' && '✅ Passed' || needs.load-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |
            | API Performance | ${{ needs.api-performance.result == 'success' && '✅ Passed' || needs.api-performance.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |

            📊 Test completed at: ${new Date().toISOString()}
            🔗 Check the Actions tab for detailed performance reports and artifacts.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
