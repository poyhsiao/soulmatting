# Release Workflow for SoulMatting Platform
#
# This workflow handles automated releases, including version bumping,
# changelog generation, and deployment to production.
#
# Version: 1.0.0
# Created: 2024-01-20
# Updated: 2024-01-20
# Author: Kim Hsiao

name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'

  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

      skip_tests:
        description: 'Skip tests (not recommended for production)'
        required: false
        default: false
        type: boolean

      force_release:
        description: 'Force release even if no changes detected'
        required: false
        default: false
        type: boolean

      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10'
  REGISTRY_URL: 'ghcr.io'
  IMAGE_NAME: 'soulmatting'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # =============================================================================
  # PRE-RELEASE CHECKS
  # =============================================================================

  pre-release:
    name: Pre-Release Checks
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for changes
        id: check
        run: |
          # Check if there are any changes since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, proceeding with release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            echo "Force release requested"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Check for changes in source code
            CHANGES=$(git diff --name-only $LAST_TAG..HEAD | grep -E '\.(ts|tsx|js|jsx|json|yml|yaml)$' | grep -v package-lock.json | wc -l)
            
            if [ $CHANGES -gt 0 ]; then
              echo "Found $CHANGES source code changes since last release"
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "No significant changes found since last release"
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Determine version
        id: version
        if: steps.check.outputs.should_release == 'true'
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'patch' }}"
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Calculate new version
          case $RELEASE_TYPE in
            "major")
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}')
              ;;
            "minor")
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}')
              ;;
            "patch")
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
              ;;
            "prerelease")
              NEW_VERSION="$CURRENT_VERSION-rc.$(date +%Y%m%d%H%M%S)"
              ;;
          esac

          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        if: steps.check.outputs.should_release == 'true'
        run: |
          # Generate changelog for this release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            CHANGELOG="Initial release"
          else
            # Get commits since last tag
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges | head -20)
            
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="Minor updates and bug fixes"
            fi
          fi

          echo "Generated changelog:"
          echo "$CHANGELOG"

          # Escape for GitHub output
          CHANGELOG_ESCAPED=$(echo "$CHANGELOG" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "changelog=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT

  # =============================================================================
  # QUALITY ASSURANCE
  # =============================================================================

  quality:
    name: Quality Assurance
    runs-on: ubuntu-latest
    needs: pre-release
    if: needs.pre-release.outputs.should_release == 'true' && github.event.inputs.skip_tests != 'true'

    strategy:
      matrix:
        service:
          [web, auth, user, match, communication, media, notification, search]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests for ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "web" ]; then
            cd apps/web
          else
            cd services/${{ matrix.service }}
          fi

          if [ -f "package.json" ]; then
            pnpm test
          else
            echo "No tests found for ${{ matrix.service }}"
          fi

      - name: Run linting for ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "web" ]; then
            cd apps/web
          else
            cd services/${{ matrix.service }}
          fi

          if [ -f "package.json" ]; then
            pnpm lint
          else
            echo "No linting configured for ${{ matrix.service }}"
          fi

  # =============================================================================
  # BUILD AND PUBLISH
  # =============================================================================

  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [pre-release, quality]
    if: always() && needs.pre-release.outputs.should_release == 'true' && (needs.quality.result == 'success' || github.event.inputs.skip_tests == 'true')

    permissions:
      contents: write
      packages: write
      pull-requests: write

    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update version
        run: |
          NEW_VERSION="${{ needs.pre-release.outputs.new_version }}"

          # Update root package.json
          npm version $NEW_VERSION --no-git-tag-version

          # Update workspace packages
          pnpm -r exec npm version $NEW_VERSION --no-git-tag-version

          echo "Updated version to $NEW_VERSION"

      - name: Build applications
        run: |
          # Build all applications and services
          pnpm build

          # Build Docker images
          docker-compose -f docker-compose.yml build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=${{ needs.pre-release.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.pre-release.outputs.new_version }}
            type=semver,pattern={{major}},value=${{ needs.pre-release.outputs.new_version }}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ needs.pre-release.outputs.new_version }}"
          CHANGELOG="${{ needs.pre-release.outputs.changelog }}"
          DATE=$(date +"%Y-%m-%d")

          # Create new changelog entry
          {
            echo "# Changelog"
            echo ""
            echo "## [$NEW_VERSION] - $DATE"
            echo ""
            echo "$CHANGELOG" | sed 's/\\n/\n/g'
            echo ""
            if [ -f "CHANGELOG.md" ]; then
              tail -n +2 CHANGELOG.md
            fi
          } > CHANGELOG.new.md

          mv CHANGELOG.new.md CHANGELOG.md

      - name: Commit and tag release
        run: |
          NEW_VERSION="${{ needs.pre-release.outputs.new_version }}"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add .
          git commit -m "chore(release): bump version to $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"

          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.pre-release.outputs.new_version }}
          release_name: Release v${{ needs.pre-release.outputs.new_version }}
          body: |
            ## Changes

            ${{ needs.pre-release.outputs.changelog }}

            ## Docker Images

            ```
            ${{ steps.meta.outputs.tags }}
            ```

            ## Installation

            ```bash
            docker pull ${{ env.REGISTRY_URL }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release.outputs.new_version }}
            ```

            ## Verification

            Image digest: `${{ steps.build.outputs.digest }}`
          draft: false
          prerelease: ${{ contains(needs.pre-release.outputs.new_version, 'rc') }}

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================

  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    needs: [pre-release, build]
    if: always() && needs.build.result == 'success'

    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to ${{ github.event.inputs.environment || 'production' }}
        id: deploy
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          NEW_VERSION="${{ needs.pre-release.outputs.new_version }}"

          echo "Deploying version $NEW_VERSION to $ENVIRONMENT"

          # Here you would add your actual deployment logic
          # For example, updating Kubernetes deployments, 
          # triggering deployment webhooks, etc.

          case $ENVIRONMENT in
            "staging")
              URL="https://staging.soulmatting.com"
              ;;
            "production")
              URL="https://soulmatting.com"
              ;;
          esac

          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Deployment completed successfully"

      - name: Run smoke tests
        run: |
          URL="${{ steps.deploy.outputs.url }}"

          echo "Running smoke tests against $URL"

          # Basic health check
          curl -f "$URL/health" || exit 1

          # API health check
          curl -f "$URL/api/health" || exit 1

          echo "Smoke tests passed"

      - name: Notify deployment
        if: always()
        run: |
          STATUS="${{ job.status }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          NEW_VERSION="${{ needs.pre-release.outputs.new_version }}"
          URL="${{ steps.deploy.outputs.url }}"

          if [ "$STATUS" = "success" ]; then
            echo "✅ Successfully deployed v$NEW_VERSION to $ENVIRONMENT"
            echo "🔗 URL: $URL"
          else
            echo "❌ Failed to deploy v$NEW_VERSION to $ENVIRONMENT"
          fi

          # Here you could add notifications to Slack, Discord, etc.

  # =============================================================================
  # POST-RELEASE
  # =============================================================================

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [pre-release, build, deploy]
    if: always() && needs.build.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update documentation
        run: |
          NEW_VERSION="${{ needs.pre-release.outputs.new_version }}"

          # Update version in documentation
          find docs -name "*.md" -exec sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: $NEW_VERSION/g" {} +

          echo "Documentation updated to version $NEW_VERSION"

      - name: Security scan
        run: |
          # Run security scan on the released version
          echo "Running security scan on released images"

          # This would typically use tools like Trivy, Snyk, etc.
          # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          #   aquasec/trivy image ${{ env.REGISTRY_URL }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release.outputs.new_version }}

      - name: Performance baseline
        run: |
          # Establish performance baseline for the new release
          echo "Establishing performance baseline"

          # This would typically run performance tests and store results

      - name: Cleanup
        run: |
          # Clean up old images, artifacts, etc.
          echo "Cleaning up old artifacts"

          # Remove old Docker images (keep last 5 versions)
          # Clean up old build artifacts
          # Update monitoring dashboards

      - name: Release summary
        run: |
          NEW_VERSION="${{ needs.pre-release.outputs.new_version }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"

          echo "🎉 Release v$NEW_VERSION completed successfully!"
          echo ""
          echo "📋 Summary:"
          echo "  - Version: $NEW_VERSION"
          echo "  - Environment: $ENVIRONMENT"
          echo "  - Images: ${{ needs.build.outputs.image_tags }}"
          echo "  - Digest: ${{ needs.build.outputs.image_digest }}"
          echo ""
          echo "🔗 Links:"
          echo "  - Release: https://github.com/${{ github.repository }}/releases/tag/v$NEW_VERSION"
          echo "  - Images: ${{ env.REGISTRY_URL }}/${{ github.repository }}/packages"
          echo "  - Deployment: ${{ needs.deploy.outputs.url }}"
