# SoulMatting Platform - Security Scanning Workflow
# Author: Kim Hsiao
# Version: 1.0.0
# Created: 2024-01-20
# Last Updated: 2024-01-20

name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10'

jobs:
  # CodeQL Analysis for code security
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          echo "## NPM Audit Results" >> $GITHUB_STEP_SUMMARY
          pnpm audit --audit-level moderate --json > audit-results.json || true

          if [ -s audit-results.json ]; then
            echo "### Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat audit-results.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: audit-results.json
          retention-days: 30

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint Security Plugin
        run: |
          echo "## ESLint Security Scan Results" >> $GITHUB_STEP_SUMMARY
          pnpm lint:security --format json --output-file eslint-security.json || true

          if [ -s eslint-security.json ]; then
            echo "### Security Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat eslint-security.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No security issues found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nodejs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload SAST results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: |
            eslint-security.json
            semgrep-results.json
          retention-days: 30

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t soulmatting/web:latest -f apps/web/Dockerfile .
          docker build -t soulmatting/api:latest -f apps/api/Dockerfile .
          docker build -t soulmatting/auth:latest -f apps/auth-service/Dockerfile .

      - name: Run Trivy vulnerability scanner - Web
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'soulmatting/web:latest'
          format: 'sarif'
          output: 'trivy-web-results.sarif'

      - name: Run Trivy vulnerability scanner - API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'soulmatting/api:latest'
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Run Trivy vulnerability scanner - Auth
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'soulmatting/auth:latest'
          format: 'sarif'
          output: 'trivy-auth-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '*.sarif'

      - name: Upload container scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: '*.sarif'
          retention-days: 30

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, sast-scan, secret-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result == 'success' && '✅ Passed' || '❌ Failed' }} | Static code analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Vulnerability scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST | ${{ needs.sast-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Security code analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Secret detection |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Scan completed at:** $(date)" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🔒 Security Scan Results

            | Scan Type | Status |
            |-----------|--------|
            | CodeQL | ${{ needs.codeql.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Dependencies | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | SAST | ${{ needs.sast-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Secrets | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |

            📊 Scan completed at: ${new Date().toISOString()}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
