# =============================================================================
# SoulMatting Platform - Development Stage CI/CD
# =============================================================================
# This workflow provides basic CI/CD for the development stage when most
# services are not yet implemented. It focuses on code quality, linting,
# and basic validation without comprehensive testing.
#
# Author: Kim Hsiao
# Version: 1.0.0
# Created: 2024-12-21
# Last Updated: 2024-12-21
# =============================================================================

name: üöß Development CI

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_basic_tests:
        description: 'Run basic tests for implemented features'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.15.0'

jobs:
  # =============================================================================
  # Code Quality & Basic Validation
  # =============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint
        continue-on-error: true

      - name: Check TypeScript
        run: pnpm type-check
        continue-on-error: true

      - name: Check code formatting
        run: pnpm format:check
        continue-on-error: true

      - name: Basic security audit
        run: pnpm audit --audit-level high
        continue-on-error: true

  # =============================================================================
  # Basic Tests (Only for Implemented Features)
  # =============================================================================
  basic-tests:
    name: Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality]
    if: github.event.inputs.run_basic_tests != 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @soulmatting/database prisma generate
        continue-on-error: true

      - name: Test database schema
        run: pnpm --filter @soulmatting/database prisma validate
        continue-on-error: true

      - name: Test TypeScript compilation
        run: pnpm build:types
        continue-on-error: true

      - name: Test basic frontend build
        run: pnpm --filter @soulmatting/web build
        continue-on-error: true

  # =============================================================================
  # Development Summary
  # =============================================================================
  summary:
    name: Development Summary
    runs-on: ubuntu-latest
    needs: [quality, basic-tests]
    if: always()

    steps:
      - name: Development Status Summary
        run: |
          echo "## üöß Development Stage CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This is a development-stage workflow designed for early development." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Basic Tests: ${{ needs.basic-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Note:" >> $GITHUB_STEP_SUMMARY
          echo "Most services are not yet implemented. This workflow focuses on:" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality and formatting" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript compilation" >> $GITHUB_STEP_SUMMARY
          echo "- Database schema validation" >> $GITHUB_STEP_SUMMARY
          echo "- Basic build processes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Comprehensive testing will be enabled as features are implemented." >> $GITHUB_STEP_SUMMARY

      - name: Notify development team
        if: failure()
        run: |
          echo "‚ö†Ô∏è Development CI failed. Please check the logs for details."
          echo "This is expected during early development stages."
