# Semgrep Security Configuration for SoulMatting Platform
# 
# This configuration defines custom security rules and settings
# for static application security testing (SAST) using Semgrep.
# 
# Version: 1.0.0
# Created: 2024-01-20
# Updated: 2024-01-20
# Author: Kim Hsiao

rules:
  # SQL Injection Prevention
  - id: sql-injection-template-literal
    pattern-either:
      - pattern: |
          $DB.query(`$QUERY`)
      - pattern: |
          $DB.raw(`$QUERY`)
      - pattern: |
          $CONN.execute(`$QUERY`)
    message: |
      Potential SQL injection vulnerability detected. 
      Template literals in SQL queries can lead to SQL injection attacks.
      Use parameterized queries instead.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-89: SQL Injection"
      owasp: "A03:2021 - Injection"
      confidence: HIGH
    
  - id: sql-injection-string-concat
    pattern-either:
      - pattern: |
          $DB.query($QUERY + $VAR)
      - pattern: |
          $DB.query($VAR + $QUERY)
      - pattern: |
          $DB.raw($QUERY + $VAR)
    message: |
      Potential SQL injection vulnerability detected.
      String concatenation in SQL queries can lead to SQL injection attacks.
      Use parameterized queries instead.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-89: SQL Injection"
      owasp: "A03:2021 - Injection"
      confidence: HIGH

  # XSS Prevention
  - id: xss-innerhtml
    pattern-either:
      - pattern: |
          $ELEMENT.innerHTML = $VAR
      - pattern: |
          $ELEMENT.outerHTML = $VAR
    message: |
      Potential XSS vulnerability detected.
      Setting innerHTML/outerHTML with user input can lead to XSS attacks.
      Use textContent or a sanitization library like DOMPurify.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-79: Cross-site Scripting"
      owasp: "A03:2021 - Injection"
      confidence: MEDIUM

  - id: xss-dangerously-set-inner-html
    pattern: |
      dangerouslySetInnerHTML={{__html: $VAR}}
    message: |
      Potential XSS vulnerability detected.
      dangerouslySetInnerHTML with user input can lead to XSS attacks.
      Sanitize the content using DOMPurify or similar library.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-79: Cross-site Scripting"
      owasp: "A03:2021 - Injection"
      confidence: HIGH

  # Code Injection Prevention
  - id: code-injection-eval
    pattern-either:
      - pattern: eval($VAR)
      - pattern: new Function($VAR)
      - pattern: setTimeout($VAR, ...)
      - pattern: setInterval($VAR, ...)
    message: |
      Potential code injection vulnerability detected.
      Dynamic code execution can lead to code injection attacks.
      Avoid using eval(), Function constructor, or string-based setTimeout/setInterval.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-94: Code Injection"
      owasp: "A03:2021 - Injection"
      confidence: HIGH

  # Path Traversal Prevention
  - id: path-traversal
    pattern-either:
      - pattern: |
          fs.readFile($PATH + $VAR, ...)
      - pattern: |
          fs.writeFile($PATH + $VAR, ...)
      - pattern: |
          fs.readFileSync($PATH + $VAR, ...)
      - pattern: |
          fs.writeFileSync($PATH + $VAR, ...)
    message: |
      Potential path traversal vulnerability detected.
      Concatenating user input to file paths can lead to path traversal attacks.
      Validate and sanitize file paths using path.resolve() and path.normalize().
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-22: Path Traversal"
      owasp: "A01:2021 - Broken Access Control"
      confidence: MEDIUM

  # Hardcoded Secrets Detection
  - id: hardcoded-jwt-secret
    pattern-either:
      - pattern: |
          jwt.sign($PAYLOAD, "$SECRET", ...)
      - pattern: |
          jwt.verify($TOKEN, "$SECRET", ...)
    message: |
      Hardcoded JWT secret detected.
      JWT secrets should be stored in environment variables, not hardcoded in source code.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-798: Hardcoded Credentials"
      owasp: "A07:2021 - Identification and Authentication Failures"
      confidence: HIGH

  - id: hardcoded-database-credentials
    pattern-either:
      - pattern: |
          password: "$PASSWORD"
      - pattern: |
          connectionString: "$CONN_STRING"
    where:
      - metavariable-regex:
          metavariable: $PASSWORD
          regex: "^(?!.*\$\{|.*process\.env).*[a-zA-Z0-9]{8,}.*$"
      - metavariable-regex:
          metavariable: $CONN_STRING
          regex: "^(?!.*\$\{|.*process\.env).*(mongodb|mysql|postgresql|redis)://.*$"
    message: |
      Hardcoded database credentials detected.
      Database credentials should be stored in environment variables.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-798: Hardcoded Credentials"
      owasp: "A07:2021 - Identification and Authentication Failures"
      confidence: HIGH

  # Insecure Random Number Generation
  - id: insecure-random
    pattern-either:
      - pattern: Math.random()
      - pattern: Math.floor(Math.random() * $N)
    message: |
      Insecure random number generation detected.
      Math.random() is not cryptographically secure.
      Use crypto.randomBytes() or crypto.randomUUID() for security-sensitive operations.
    languages: [javascript, typescript]
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-338: Weak PRNG"
      owasp: "A02:2021 - Cryptographic Failures"
      confidence: MEDIUM

  # Prototype Pollution Prevention
  - id: prototype-pollution
    pattern-either:
      - pattern: |
          $OBJ["__proto__"] = $VAL
      - pattern: |
          $OBJ["constructor"] = $VAL
      - pattern: |
          $OBJ["prototype"] = $VAL
      - pattern: |
          $OBJ.__proto__ = $VAL
    message: |
      Potential prototype pollution vulnerability detected.
      Modifying object prototypes can lead to prototype pollution attacks.
      Validate object keys and use Object.create(null) for safe objects.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-1321: Prototype Pollution"
      owasp: "A08:2021 - Software and Data Integrity Failures"
      confidence: HIGH

  # Insecure HTTP Headers
  - id: missing-security-headers
    pattern-either:
      - pattern: |
          $APP.use(helmet())
      - pattern: |
          $RES.setHeader("X-Frame-Options", $VAL)
      - pattern: |
          $RES.setHeader("Content-Security-Policy", $VAL)
    message: |
      Security headers configuration detected.
      Ensure all necessary security headers are properly configured:
      - X-Frame-Options
      - Content-Security-Policy
      - X-Content-Type-Options
      - Strict-Transport-Security
    languages: [javascript, typescript]
    severity: INFO
    metadata:
      category: security
      cwe: "CWE-693: Protection Mechanism Failure"
      owasp: "A05:2021 - Security Misconfiguration"
      confidence: LOW

  # JWT Security Issues
  - id: jwt-none-algorithm
    pattern-either:
      - pattern: |
          jwt.sign($PAYLOAD, $SECRET, {algorithm: "none"})
      - pattern: |
          jwt.verify($TOKEN, $SECRET, {algorithms: ["none"]})
    message: |
      JWT 'none' algorithm detected.
      The 'none' algorithm disables signature verification and should never be used.
      Use secure algorithms like HS256, RS256, or ES256.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-347: Improper Verification of Cryptographic Signature"
      owasp: "A02:2021 - Cryptographic Failures"
      confidence: HIGH

  # Regex DoS Prevention
  - id: regex-dos
    pattern-either:
      - pattern: |
          new RegExp($PATTERN)
      - pattern: |
          /$PATTERN/
    where:
      - metavariable-regex:
          metavariable: $PATTERN
          regex: ".*\(.*\+.*\).*\*.*|.*\(.*\*.*\).*\+.*"
    message: |
      Potential ReDoS (Regular Expression Denial of Service) vulnerability detected.
      Complex regex patterns with nested quantifiers can cause exponential backtracking.
      Review and optimize the regex pattern.
    languages: [javascript, typescript]
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-1333: ReDoS"
      owasp: "A06:2021 - Vulnerable and Outdated Components"
      confidence: MEDIUM

  # Command Injection Prevention
  - id: command-injection
    pattern-either:
      - pattern: |
          exec($CMD + $VAR)
      - pattern: |
          spawn($CMD, [$VAR])
      - pattern: |
          execSync($CMD + $VAR)
    message: |
      Potential command injection vulnerability detected.
      Concatenating user input to shell commands can lead to command injection attacks.
      Use parameterized commands and validate input.
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-78: Command Injection"
      owasp: "A03:2021 - Injection"
      confidence: HIGH

  # Insecure Deserialization
  - id: insecure-deserialization
    pattern-either:
      - pattern: |
          JSON.parse($VAR)
      - pattern: |
          eval($VAR)
      - pattern: |
          Function($VAR)()
    message: |
      Potential insecure deserialization detected.
      Deserializing untrusted data can lead to code execution.
      Validate and sanitize input before deserialization.
    languages: [javascript, typescript]
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-502: Insecure Deserialization"
      owasp: "A08:2021 - Software and Data Integrity Failures"
      confidence: MEDIUM

  # CORS Misconfiguration
  - id: cors-wildcard-origin
    pattern-either:
      - pattern: |
          cors({origin: "*"})
      - pattern: |
          $RES.setHeader("Access-Control-Allow-Origin", "*")
    message: |
      CORS wildcard origin detected.
      Using '*' as origin allows any domain to access your API.
      Specify explicit origins or use dynamic origin validation.
    languages: [javascript, typescript]
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-942: Overly Permissive CORS Policy"
      owasp: "A05:2021 - Security Misconfiguration"
      confidence: HIGH

# Global settings
settings:
  # Exclude common false positive patterns
  exclude:
    - "node_modules/**"
    - "dist/**"
    - "build/**"
    - "coverage/**"
    - "*.min.js"
    - "*.bundle.js"
    - "**/*.test.js"
    - "**/*.test.ts"
    - "**/*.spec.js"
    - "**/*.spec.ts"
    - "**/tests/**"
    - "**/test/**"
    - "**/__tests__/**"
    - "**/*.config.js"
    - "**/*.config.ts"
    - "**/config/**"
    - "docs/**"
    - "*.md"
    - "*.json"
    - "*.yml"
    - "*.yaml"

  # Include specific file patterns
  include:
    - "apps/**/*.js"
    - "apps/**/*.ts"
    - "apps/**/*.jsx"
    - "apps/**/*.tsx"
    - "packages/**/*.js"
    - "packages/**/*.ts"
    - "packages/**/*.jsx"
    - "packages/**/*.tsx"
    - "src/**/*.js"
    - "src/**/*.ts"
    - "src/**/*.jsx"
    - "src/**/*.tsx"

  # Performance settings
  max_target_bytes: 1000000  # 1MB
  timeout: 30  # 30 seconds
  max_memory: 2000  # 2GB

  # Output settings
  output:
    format: "json"
    verbose: false
    quiet: false
    time: true
    
  # Severity levels
  severity:
    error: ["ERROR"]
    warning: ["WARNING"]
    info: ["INFO"]